import streamlit as st
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier

# Load the dataset
df = pd.read_csv("AgroMAT_dataset_with_references.csv")

# Preprocess inputs
X = df.drop(columns=["ID", "Suggested Material", "Notes", "Reference Source"])
y = df["Suggested Material"]

# Label encode categorical columns
label_encoders = {}
for col in X.columns:
    if X[col].dtype == "object":
        le = LabelEncoder().fit(X[col])
        X[col] = le.transform(X[col])
        label_encoders[col] = le

# Encode the target
target_encoder = LabelEncoder().fit(y)
y_encoded = target_encoder.transform(y)

# Train the model
model = DecisionTreeClassifier().fit(X, y_encoded)

# ------------------------- UI STARTS HERE ---------------------------- #

st.set_page_config(page_title="AgroMAT", page_icon="ЁЯМ╛")
st.markdown("<h1 style='text-align: center; color: green;'>ЁЯМ╛ AgroMAT - рокрпБродрпНродро┐роЪро╛ро▓ро┐ роорпЖроЯрпНроЯрпАро░ро┐ропро▓рпН рокро░ро┐роирпНродрпБро░рпИ роХро░рпБро╡ро┐</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center;'>ЁЯСитАНЁЯМ╛ Smart, Eco-friendly & Affordable Material Selection Tool for Farmers</h4>", unsafe_allow_html=True)
st.markdown("---")

st.markdown("### ЁЯУе рокропройро░рпН роЙро│рпНро│рпАроЯрпБ / User Inputs")

app = st.selectbox("ЁЯУж рокропройрпНрокро╛роЯрпБ (Application)", df["Application"].unique())
env = st.selectbox("ЁЯМдя╕П роЪрпВро┤рпНроиро┐ро▓рпИ (Environment)", df["Environment"].unique())
curr = st.selectbox("ЁЯФй родро▒рпНрокрпЛродрпИроп рокрпКро░рпБро│рпН (Current Material)", df["Current Material"].unique())
fail = st.selectbox("ЁЯТе рокро╛родро┐рокрпНрокрпБ ро╡ро┐родроорпН (Failure Mode)", df["Failure Mode"].unique())
budget = st.selectbox("ЁЯТ░ роЪрпЖро▓ро╡рпБродрпНродро┐ро▒ройрпН (Budget)", df["Budget"].unique())
life = st.slider("ЁЯУЕ роЖропрпБро│рпН (ро╡ро░рпБроЯроЩрпНроХро│рпН) / Life Expectancy", 0.0, 10.0, 2.0)
eco = st.selectbox("тЩ╗я╕П рокроЪрпБроорпИ роорпБройрпНройро┐ро▓рпИ (Eco Priority)", df["Eco Priority"].unique())

st.markdown("---")
if st.button("ЁЯФН рокро░ро┐роирпНродрпБро░рпИ рокрпЖро▒рпБ / Get Recommendation"):

    input_data = {
        "Application": app,
        "Environment": env,
        "Current Material": curr,
        "Failure Mode": fail,
        "Budget": budget,
        "Life Expectancy (yrs)": life,
        "Eco Priority": eco
    }

    encoded_input = []
    for col in X.columns:
        if col in label_encoders:
            encoded_input.append(label_encoders[col].transform([input_data[col]])[0])
        else:
            encoded_input.append(input_data[col])  # For numeric columns

    pred = model.predict([encoded_input])[0]
    material = target_encoder.inverse_transform([pred])[0]

    st.success(f"тЬЕ рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ рокрпКро░рпБро│рпН (Recommended Material): **{material}**")

    result_dict = input_data.copy()
    result_dict["Suggested Material"] = material
    result_df = pd.DataFrame([result_dict])

    st.download_button(
        label="тмЗя╕П рокро░ро┐роирпНродрпБро░рпИ CSV роЖроХ рокродро┐ро╡ро┐ро▒роХрпНроХ / Download as CSV",
        data=result_df.to_csv(index=False),
        file_name="AgroMAT_Prediction.csv",
        mime="text/csv"
    )

st.markdown("---")
st.markdown("ЁЯФм <i>AgroMAT is designed by integrating Machine Learning with Materials Science, focusing on farmers' practical problems.</i>", unsafe_allow_html=True)
st.markdown("ЁЯМ▒ <b>Developed by Kowshic K T </b>", unsafe_allow_html=True)
